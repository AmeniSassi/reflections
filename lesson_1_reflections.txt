How did viewing a diff between two versions of a file help you see the bug that
was introduced?

    By finding exactly the location of the part of the file that have been changed

How could having easy access to the entire history of a file make you a more
efficient programmer in the long term?

    Not making the same bugs, Easily find the correction needed to fix a specific bug, Leave a mark of each modified code and be able to go back in case of problems


What do you think are the pros and cons of manually choosing when to create a
commit, like you do in Git, vs having versions automatically saved, like Google
docs does?

    The disadvantage of choosing when to create a commit manually is that you could forget when the last commit is created and the commit could be too long. Otherwise, make a commit by ourselves is a good way to have a well logically-organized history, not like the Google docs way where two or more automatically saved versions could be the same or with an insignificant changes

Why do you think some version control systems, like Git, allow saving multiple
files in one commit, while others, like Google Docs, treat each file separately?

    Because files may have some interdependencies and it will be more meaningful to track these files together

How can you use the commands git log and git diff to view the history of files?

    To view history of files, we have to use at first the command git log to view the list of commits historically classified and then the command git diff to view the difference in the code lines between two commits

How might using version control make you more confident to make changes that
could break something?

    We could be more confident to make changes because we are sure that we can reset all the files to how they were at a specific time using the appropriate commit ID

Now that you have your workspace set up, what do you want to try using Git for?

    I will try to use Git for control the different versions of files of a C application
